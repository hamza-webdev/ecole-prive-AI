#!/usr/bin/env python3
"""
Script de g√©n√©ration de donn√©es fictives pour l'application √âcole Priv√©e
Utilise Faker pour cr√©er des donn√©es r√©alistes de test
"""

import random
from datetime import date, datetime, timedelta
from faker import Faker
from sqlalchemy.orm import Session
from .database import SessionLocal, engine
from .models.user import User, UserRole
from .models.student import Student
from .models.teacher import Teacher
from .models.classe import Classe
from .models.subject import Subject
from .models.enrollment import Enrollment, EnrollmentStatus
from .auth import get_password_hash

# Configuration Faker en fran√ßais
fake = Faker('fr_FR')
Faker.seed(42)  # Pour des r√©sultats reproductibles


def create_admin_user(db: Session) -> User:
    """Cr√©er un utilisateur administrateur par d√©faut."""
    admin = User(
        email="admin@ecole-prive.fr",
        username="admin",
        first_name="Administrateur",
        last_name="Syst√®me",
        hashed_password=get_password_hash("admin123"),
        role=UserRole.ADMIN,
        phone="01.23.45.67.89",
        address="123 Rue de l'√âcole, 75001 Paris",
        is_active=True
    )
    db.add(admin)
    db.commit()
    db.refresh(admin)
    print(f"‚úÖ Administrateur cr√©√©: {admin.email}")
    return admin


def create_fake_users(db: Session, count: int, role: UserRole) -> list[User]:
    """Cr√©er des utilisateurs fictifs."""
    users = []
    
    for i in range(count):
        first_name = fake.first_name()
        last_name = fake.last_name()
        username = f"{first_name.lower()}.{last_name.lower()}{i+1}"
        email = f"{username}@ecole-prive.fr"
        
        user = User(
            email=email,
            username=username,
            first_name=first_name,
            last_name=last_name,
            hashed_password=get_password_hash("password123"),
            role=role,
            phone=fake.phone_number(),
            address=fake.address(),
            is_active=True
        )
        
        db.add(user)
        users.append(user)
    
    db.commit()
    for user in users:
        db.refresh(user)
    
    print(f"‚úÖ {count} utilisateurs {role.value} cr√©√©s")
    return users


def create_fake_teachers(db: Session, teacher_users: list[User]) -> list[Teacher]:
    """Cr√©er des profils enseignants fictifs."""
    teachers = []
    specializations = [
        "Math√©matiques", "Fran√ßais", "Histoire-G√©ographie", "Sciences Physiques",
        "Sciences de la Vie et de la Terre", "Anglais", "Espagnol", "Allemand",
        "√âducation Physique et Sportive", "Arts Plastiques", "Musique", "Philosophie",
        "√âconomie", "Informatique", "Technologie"
    ]
    
    for i, user in enumerate(teacher_users):
        teacher = Teacher(
            user_id=user.id,
            employee_number=f"ENS{2024}{i+1:03d}",
            hire_date=fake.date_between(start_date='-10y', end_date='today'),
            specialization=random.choice(specializations),
            qualifications=fake.text(max_nb_chars=200),
            salary=random.randint(250000, 450000)  # En centimes (2500‚Ç¨ √† 4500‚Ç¨)
        )
        
        db.add(teacher)
        teachers.append(teacher)
    
    db.commit()
    for teacher in teachers:
        db.refresh(teacher)
    
    print(f"‚úÖ {len(teachers)} profils enseignants cr√©√©s")
    return teachers


def create_fake_students(db: Session, student_users: list[User]) -> list[Student]:
    """Cr√©er des profils √©tudiants fictifs."""
    students = []
    
    for i, user in enumerate(student_users):
        # Date de naissance entre 6 et 18 ans
        birth_date = fake.date_between(start_date='-18y', end_date='-6y')
        
        student = Student(
            user_id=user.id,
            student_number=f"ETU{2024}{i+1:04d}",
            date_of_birth=birth_date,
            parent_name=fake.name(),
            parent_phone=fake.phone_number(),
            parent_email=fake.email(),
            emergency_contact=fake.phone_number(),
            medical_info=fake.text(max_nb_chars=100) if random.choice([True, False]) else None
        )
        
        db.add(student)
        students.append(student)
    
    db.commit()
    for student in students:
        db.refresh(student)
    
    print(f"‚úÖ {len(students)} profils √©tudiants cr√©√©s")
    return students


def create_fake_classes(db: Session) -> list[Classe]:
    """Cr√©er des classes fictives."""
    classes_data = [
        # Primaire
        ("CP A", "CP", "A", 25),
        ("CP B", "CP", "B", 25),
        ("CE1 A", "CE1", "A", 25),
        ("CE1 B", "CE1", "B", 25),
        ("CE2 A", "CE2", "A", 25),
        ("CM1 A", "CM1", "A", 25),
        ("CM2 A", "CM2", "A", 25),
        
        # Coll√®ge
        ("6√®me A", "6√®me", "A", 28),
        ("6√®me B", "6√®me", "B", 28),
        ("5√®me A", "5√®me", "A", 28),
        ("5√®me B", "5√®me", "B", 28),
        ("4√®me A", "4√®me", "A", 28),
        ("4√®me B", "4√®me", "B", 28),
        ("3√®me A", "3√®me", "A", 28),
        ("3√®me B", "3√®me", "B", 28),
        
        # Lyc√©e
        ("2nde A", "2nde", "G√©n√©rale", 30),
        ("2nde B", "2nde", "G√©n√©rale", 30),
        ("1√®re S", "1√®re", "Scientifique", 30),
        ("1√®re ES", "1√®re", "√âconomique et Social", 30),
        ("1√®re L", "1√®re", "Litt√©raire", 30),
        ("Terminale S", "Terminale", "Scientifique", 30),
        ("Terminale ES", "Terminale", "√âconomique et Social", 30),
        ("Terminale L", "Terminale", "Litt√©raire", 30),
    ]
    
    classes = []
    for name, level, section, max_students in classes_data:
        classe = Classe(
            name=name,
            level=level,
            section=section,
            academic_year="2024-2025",
            max_students=max_students,
            description=f"Classe de {name} pour l'ann√©e scolaire 2024-2025"
        )
        
        db.add(classe)
        classes.append(classe)
    
    db.commit()
    for classe in classes:
        db.refresh(classe)
    
    print(f"‚úÖ {len(classes)} classes cr√©√©es")
    return classes


def create_fake_subjects(db: Session, classes: list[Classe], teachers: list[Teacher]) -> list[Subject]:
    """Cr√©er des mati√®res fictives."""
    subjects_by_level = {
        "CP": ["Fran√ßais", "Math√©matiques", "D√©couverte du monde", "Arts plastiques", "EPS"],
        "CE1": ["Fran√ßais", "Math√©matiques", "D√©couverte du monde", "Arts plastiques", "EPS"],
        "CE2": ["Fran√ßais", "Math√©matiques", "Sciences", "Histoire-G√©ographie", "Arts plastiques", "EPS"],
        "CM1": ["Fran√ßais", "Math√©matiques", "Sciences", "Histoire-G√©ographie", "Arts plastiques", "EPS", "Anglais"],
        "CM2": ["Fran√ßais", "Math√©matiques", "Sciences", "Histoire-G√©ographie", "Arts plastiques", "EPS", "Anglais"],
        "6√®me": ["Fran√ßais", "Math√©matiques", "Histoire-G√©ographie", "SVT", "Physique-Chimie", "Anglais", "Arts plastiques", "Musique", "EPS", "Technologie"],
        "5√®me": ["Fran√ßais", "Math√©matiques", "Histoire-G√©ographie", "SVT", "Physique-Chimie", "Anglais", "Espagnol", "Arts plastiques", "Musique", "EPS", "Technologie"],
        "4√®me": ["Fran√ßais", "Math√©matiques", "Histoire-G√©ographie", "SVT", "Physique-Chimie", "Anglais", "Espagnol", "Arts plastiques", "Musique", "EPS", "Technologie"],
        "3√®me": ["Fran√ßais", "Math√©matiques", "Histoire-G√©ographie", "SVT", "Physique-Chimie", "Anglais", "Espagnol", "Arts plastiques", "Musique", "EPS", "Technologie"],
        "2nde": ["Fran√ßais", "Math√©matiques", "Histoire-G√©ographie", "SVT", "Physique-Chimie", "Anglais", "Espagnol", "EPS", "SES"],
        "1√®re": ["Fran√ßais", "Math√©matiques", "Histoire-G√©ographie", "Philosophie", "Anglais", "Espagnol", "EPS"],
        "Terminale": ["Philosophie", "Math√©matiques", "Histoire-G√©ographie", "Anglais", "Espagnol", "EPS"]
    }
    
    subjects = []
    subject_counter = 1
    
    for classe in classes:
        level = classe.level
        if level in subjects_by_level:
            for subject_name in subjects_by_level[level]:
                # Assigner un enseignant al√©atoire
                teacher = random.choice(teachers)
                
                subject = Subject(
                    name=subject_name,
                    code=f"{subject_name[:3].upper()}{subject_counter:03d}",
                    description=f"{subject_name} pour la classe {classe.name}",
                    credits=random.randint(1, 4),
                    hours_per_week=random.randint(1, 6),
                    teacher_id=teacher.id,
                    classe_id=classe.id
                )
                
                db.add(subject)
                subjects.append(subject)
                subject_counter += 1
    
    db.commit()
    for subject in subjects:
        db.refresh(subject)
    
    print(f"‚úÖ {len(subjects)} mati√®res cr√©√©es")
    return subjects


def create_fake_enrollments(db: Session, students: list[Student], classes: list[Classe]) -> list[Enrollment]:
    """Cr√©er des inscriptions fictives."""
    enrollments = []
    
    # R√©partir les √©tudiants dans les classes
    for student in students:
        # Choisir une classe al√©atoire
        classe = random.choice(classes)
        
        enrollment = Enrollment(
            student_id=student.id,
            classe_id=classe.id,
            enrollment_date=fake.date_between(start_date='-1y', end_date='today'),
            status=random.choice(list(EnrollmentStatus))
        )
        
        db.add(enrollment)
        enrollments.append(enrollment)
    
    db.commit()
    for enrollment in enrollments:
        db.refresh(enrollment)
    
    print(f"‚úÖ {len(enrollments)} inscriptions cr√©√©es")
    return enrollments


def seed_database():
    """Fonction principale pour peupler la base de donn√©es."""
    print("üå± D√©but du peuplement de la base de donn√©es...")
    
    # Cr√©er une session
    db = SessionLocal()
    
    try:
        # 1. Cr√©er l'administrateur
        admin = create_admin_user(db)
        
        # 2. Cr√©er les utilisateurs
        teacher_users = create_fake_users(db, 15, UserRole.TEACHER)
        student_users = create_fake_users(db, 100, UserRole.STUDENT)
        parent_users = create_fake_users(db, 50, UserRole.PARENT)
        
        # 3. Cr√©er les profils enseignants
        teachers = create_fake_teachers(db, teacher_users)
        
        # 4. Cr√©er les profils √©tudiants
        students = create_fake_students(db, student_users)
        
        # 5. Cr√©er les classes
        classes = create_fake_classes(db)
        
        # 6. Cr√©er les mati√®res
        subjects = create_fake_subjects(db, classes, teachers)
        
        # 7. Cr√©er les inscriptions
        enrollments = create_fake_enrollments(db, students, classes)
        
        print("\nüéâ Peuplement termin√© avec succ√®s !")
        print(f"üìä R√©sum√©:")
        print(f"   - 1 administrateur")
        print(f"   - {len(teacher_users)} enseignants")
        print(f"   - {len(student_users)} √©tudiants")
        print(f"   - {len(parent_users)} parents")
        print(f"   - {len(classes)} classes")
        print(f"   - {len(subjects)} mati√®res")
        print(f"   - {len(enrollments)} inscriptions")
        
        print(f"\nüîë Compte administrateur:")
        print(f"   Email: admin@ecole-prive.fr")
        print(f"   Mot de passe: admin123")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du peuplement: {e}")
        db.rollback()
        raise
    finally:
        db.close()


if __name__ == "__main__":
    seed_database()
